1
0
0
0
0
1
0
0
1

1
1
1
0
1
1
1
1
2

0
0
0
0
0
0
0
0
1



#include <iostream>
using namespace std;
int* cellCompete(int* cells,int days){
    int i,day,next[8];
    for(day=0;day<days;day++){
        for(i=0;i<8;i++){
            if(i==0){
                if(cells[1] == 0){
                    cells[i] = !cells[i];
                }
            }
            if(i==7){
                if(cells[6] == 0){
                    cells[i] = !cells[i];
                }
            }
            if(cells[i-1] == cells[i+1]){
                cells[i] = !cells[i];
            }
        }
    }
    return cells;
}

int main(){
    int arr[8],days,i,*arrRes;
    for(i=0;i<8;i++)
    cin >> arr[i]; 
    cin >> days;
    arrRes = cellCompete(arr,days);
    for(i=0;i<8;i++)
    cout << arr[i]; 

    cout << endl;
    return 0;
}



#include <iostream>
#include <cstdlib>
using namespace std;
int *cellCompete(int *cells, int days)
{
    int i, day, next[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    for (day = 0; day < days; day++)
    { //swap from the second day
        if (day > 0)
        {
            cells = next;
        }
        for (i = 0; i < 8; i++)
        {
            if (cells[i - 1] != cells[i + 1] && i!=0 && i!=7)
            {
                next[i] = !cells[i];
            }
            else if (i == 0)
            {
                if (cells[1] == 0)
                {
                    next[i] = !cells[i];
                }
            }
            else if (i == 7)
            {
                if (next[6] == 0)
                {
                    next[i] = !cells[i];
                }
            }
        }
        //days progress
        cout << endl
             << "Day:" << day << endl;
        for (i = 0; i < 8; i++)
            cout << cells[i];

        cout << endl
             << "Next" << endl;
        for (i = 0; i < 8; i++)
            cout << next[i];

        cout << endl;
    }
    return next;
}

int main()
{
    int arr[8], days, i, *arrRes;
    for (i = 0; i < 8; i++)
        cin >> arr[i];
    cin >> days;
    arrRes = (int *)calloc(8, sizeof(int));
    arrRes = cellCompete(arr, days);
    for (i = 0; i < 8; i++)
        cout << arrRes[i] << " ";

    cout << endl;
    return 0;
}


{
    int i, day, next[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    for (day = 0; day < days; day++)
    { //swap from the second day
        if (day > 0)
        {
            cells = next;
        }
        for (i = 0; i < 8; i++)
        {
            if (i == 0)
            {
                if (cells[1] == 0)
                {
                    next[i] = 0;
                }else{
                    next[i] = 1;
                }
            }
            else if (i == 7)
            {
                if (next[6] == 0)
                {
                    next[i] = 0;
                }else{
                    next[i] = 1;
                }
            }
            else if (cells[i - 1] != cells[i + 1])
            {
                next[i] = 0;
            }else{
                next[i] = 1;
            }
        }
        //days progress
        cout << endl
             << "Day:" << day << endl;
        for (i = 0; i < 8; i++)
            cout << cells[i];

        cout << endl
             << "Next" << endl;
        for (i = 0; i < 8; i++)
            cout << next[i];

        cout << endl;
    }
    return cells;
}

int cellCompeter(int *cells, int day)
{
    //write your code here
    for (int i = 0; i < day; i++)
    {
        cells[-1] = 0; //assumptions
        cells[8] = 0;  //assumptions
        int u[8];      //another array to copy value
        for (int i = -1; i < 9; i++)
        {
            u[i] = cells[i];
        }
        for (int j = 0; j < 8; j++)
        {
            if (u[j - 1] == u[j + 1])
            {                 //comparing the value of the neighbouring cells of u[]
                cells[j] = 0; //changing value of cell according to condition
            }
            else
                cells[j] = 1;
        }
    }
    for (int i = 0; i < 8; i++)
    {
        cout << cells[i];
    }
    return 0;
}
